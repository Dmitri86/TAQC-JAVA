Java Development Kit (JDK) 14 has moved to a second rampdown phase, with the overall feature set now frozen.
The planned upgrade to standard Java will feature new capabilities such as JDK Flight Recorder event streaming,
pattern matching, and switch expressions.

[ Also on InfoWorld: 10 software development cults to join | Keep up with hot topics in software development with
InfoWorldâ€™s App Dev Report newsletter ]
JDK 14 is scheduled for a production release on March 17, 2020, following the six-month release cadence set for
Java. The features targeted to JDK 14 include:

JFR Event Streaming provides an API for the continuous consumption of JFR data from both in-process and out-of-process
 applications. JFR is a tool for collecting profiling and diagnostic data about a running Java application. The event
 streaming proposal records the same set of events as for the non-streaming case, with overhead of less than one percent
  if possible. Event streaming must co-exist with non-streaming recordings, both disk-based and memory-based.
  Motivating this proposal is a situation in which the HotSpot VM emits more than 500 data points using JFR, most of
  them available only by parsing log files. Currently, a user must start a recording, stop it, dump the contents to
   disk, and then parse the recording file. This works well for application profiling, but not for monitoring purposes.
    An example of monitoring usage is a dashboard that displays dynamic updates to data. There is overhead with
    creating a recording, such as copying data from the disk repository to a separate recording file. If there were a
    way to read data being recorded from the disk repository without creating a new recording file, much of the
    overhead could be avoided.
The planned improvement to NullPointerExceptions pertains to improving the usability of the exceptions generated by the
 JVM by describing exactly which variable was null. Authors of the proposal are looking to provide helpful information
 to developers and support staff about the premature termination of a program and improve program understanding by more
  clearly associating a dynamic exception with static program code. One goal is to reduce confusion and concern
  developers have about NullPointerExceptions.
Non-volatile mapped byte buffers would add new JDK-specific file mapping modes that allow the FileChannel API to be
 used to create MappedByteBuffer instances that refer to non-volatile memory (NVM). NVM enables programmers to build
 and update program state across program runs without incurring the significant copying or translation costs that input
  and output operations usually require. This is particularly significant for transactional programs. Thus the chief
  goal of this JDK Enhancement Proposal is to ensure that clients can access and update NVM from a Java program
   coherently and efficiently. A secondary goal is to implement this commit behavior using a restricted,
   JDK-internal API defined in class Unsafe, so it can be re-used by classes other than MappedByteBuffer that may
   need to commit to NVM. Another goal is to allow buffers mapped over NVM to be tracked by existing APIs for
   monitoring and management. Target OS/CPU platforms include Linux/x64 and Linux/AArch64.